name: "Build"

on:
  push:
    branches:
      - dev

jobs:
  build:
    name: Build & Release
    runs-on: macos-latest

    steps:
      #1 Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      #2 Get Latest Release
      - name: Get Latest Release
        id: get_latest_release
        uses: pozetroninc/github-action-get-latest-release@v0.8.0
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.TOKEN }}

      #3 Extract Version
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=v$version" >> $GITHUB_ENV

      #4 Increment Version
      - name: Increment version
        run: |
          # Extraire la dernière version publiée et la version du fichier pubspec.yaml
          latest_version="${{ steps.get_latest_release.outputs.release }}"
          extracted_version="${{ env.VERSION }}"

          echo "Dernière version: $latest_version"
          echo "Version extraite: $extracted_version"

          # Extraire X, Y, Z et suffix des deux versions
          if [[ $latest_version =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)(-.+)?$ ]]; then
              latest_X="${BASH_REMATCH[1]}"
              latest_Y="${BASH_REMATCH[2]}"
              latest_Z="${BASH_REMATCH[3]}"
              latest_suffix="${BASH_REMATCH[4]}"
          else
              echo "Format de la dernière version publiée invalide: $latest_version"
              exit 1
          fi

          if [[ $extracted_version =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)(-.+)?$ ]]; then
              extracted_X="${BASH_REMATCH[1]}"
              extracted_Y="${BASH_REMATCH[2]}"
              extracted_Z="${BASH_REMATCH[3]}"
              extracted_suffix="${BASH_REMATCH[4]}"
          else
              echo "Format de la version extraite invalide: $extracted_version"
              exit 1
          fi

          add_alpha_suffix=false
          if [[ -z "$extracted_suffix" ]] && [ "$extracted_X" -eq 0 ]; then
              add_alpha_suffix=true
          fi

          # Comparaison des parties de version
          if (( extracted_X > latest_X )) || 
             (( extracted_X == latest_X && extracted_Y > latest_Y )) || 
             (( extracted_X == latest_X && extracted_Y == latest_Y && extracted_Z > latest_Z )); then
              # Utiliser la version extraite si elle est plus grande
              new_version="$extracted_version"
          elif (( extracted_X == latest_X && extracted_Y == latest_Y && extracted_Z == latest_Z )); then
              # Incrémenter Z de la version extraite si elle est égale à la dernière version
              new_Z=$((extracted_Z + 1))
              new_version="v${extracted_X}.${extracted_Y}.${new_Z}${extracted_suffix}"
          else
              # Sinon, incrémenter la dernière version
              new_Z=$((latest_Z + 1))
              new_version="v${latest_X}.${latest_Y}.${new_Z}${latest_suffix}"
              if [[ -z "$latest_suffix" ]] && [ "$latest_X" -eq 0 ]; then
                add_alpha_suffix=true
              fi          
          fi

          echo "$add_alpha_suffix"

          # Ajouter "-alpha" si nécessaire
          if [[ "$add_alpha_suffix" == true ]]; then
              new_version="${new_version}-alpha"
          fi

          echo "Nouvelle version: $new_version"
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

        #5 Setup Java
      - name: Set Up Java
        uses: actions/setup-java@v4
        with:
          distribution: "oracle"
          java-version: "17"

        #6 Setup Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.3"
          channel: "stable"

        #7 Install Dependencies
      - name: Install Dependencies
        run: flutter pub get

        #8 Setup Keystore
      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties

        #9 Building APK
      - name: Build APK
        run: |
          echo "API_TOKEN=${{ secrets.START_GG_API_TOKEN }}" > .env
          flutter build apk --release

        #10 Building App Bundle (aab)
      - name: Build appBundle
        run: |
          echo "API_TOKEN=${{ secrets.START_GG_API_TOKEN }}" > .env
          flutter build appbundle

        # Build IPA ( IOS Build )
      # - name: Build IPA
      #  run: flutter build ipa --no-codesign
      # - name: Compress Archives and IPAs
      #   run: |
      #     cd build
      #     tar -czf ios_build.tar.gz ios
      #11 Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
            # build/ios_build.tar.gz

        #13 Create Release
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/flutter-apk/app-release.apk,build/app/outputs/bundle/release/app-release.aab,build/ios_build.tar.gz"
          tag: ${{ env.VERSION }}
          token: ${{ secrets.TOKEN }}
